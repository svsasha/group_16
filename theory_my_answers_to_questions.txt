1. Что подразумевается под тестовой средой?
    Тестовая среда - это окружение, в котором работает команда тестировщиков. Здесь выполняются регрессионные проверки и проверки функционала. 
Тестовая среда – это настройка ПО для тестирования.

2. В чем отличие build от release?

Build — это "сборка". Т.е. билд — это версия ПО, которую разработчики передают тестировщикам. Сборки происходят до релиза.
А Release - это версия ПО, которая передается заказчику после завершения этапов разработки и тестирования.

3. Основные фазы тестирования?

Пре-альфа: Это «сырая» версия продукта. Период времени со старта разработки до выхода стадии Альфа. Может включать в себя
 не весь спектр функциональных возможностей программы.

Альфа: На этой стадии начинается тестирование программы в целом тестировщиками. Есть возможность добавлять новые функциональные
возможности. Как правило, это происходит внутри организации, разрабатывающей продукт.

Бета: ПО проверено и выпущено ограниченному числу пользователей (как правило, вне организации). С целью получить необходимые
отзывы и замечания от клиентов о продукте для дальнейшего анализа, доработки и исправлении ошибок ПО.

Релиз-кандидат: На основе отзывов бета-тестирования, вносятся необходимые изменения в ПО, исправляются все найденные ошибки.
Релиз-кандидат также выставляется общественности.

Выпуск: На этом этапе происходит публичный выпуск ПО. Выпуск считается стабильным.

4. Что такое импакт анализ?

Импакт анализ применяется программистами для улучшения тестирования. Это указание программистами затронутых мест в проекте 
при разработке новой функциональности или внесении изменений в старую. Позволяет уменьшить 
затраты времени и ресурсов на тестирование, значительно повышая его эффективность.

5. Критерии выбора тестов?
Требования к идеальному критерию тестирования:
• Критерий должен быть достаточным;
• Критерий должен быть полным;
• Критерий должен быть надежным;
• Критерий должен быть легко проверяемым.

Существуют классы критериев тестирования, например:
структурные критерии, функциональные критерии, мутационные критерии и т.д... 
Структурные критерии используют модель программы в виде "белого ящика", что предполагает знание исходного текста программы или спецификации программы.
Функциональные критерии – обеспечивают контроль степени выполнения требований заказчика в программном продукте. Отражают взаимодействие тестируемого приложения с окружением. Преимущественно используется модель "черного ящика".

С помощью критериев тестирования мы можем добиться в той или иной степени того, что мы ждём от конечного продукта.

6. Принципы тестирования

- Тестирование демонстрирует наличие дефектов. Тесты показывают наличие дефектов в ПО, но они не могут доказать их отсутствие. 

- Исчерпывающее тестирование недостижимо. Невозможно выполнить такое тестирование, которое покроет все комбинации входных параметров пользователя и состояния системы ПО (за исключением самых простых случаев). Нужно обязательно предварительно разрабатывать стратегию тестирования продукта.

- Раннее тестирование. Процесс тестирования должен начаться как можно раньше и должен достичь определенных целей. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить. Также огромным преимуществом раннего тестирования является экономия времени. 

- Скопление/кластеризация дефектов. Разные системные модули могут содержать разное количество дефектов – а именно, плотность дефектов в разных элементах системы может быть разной. Нужно проводить анализ причин скопления дефектов по разным системным модулям. А также распределять тестирование пропорционально фактической плотности дефектов.

- Парадокс пестицида. Со временем, когда тесты применяются множество раз, они находят все меньше и меньше новых дефектов. И, следовательно, становятся неэффективными для данного продукта. Необходимо регулярно пересматривать существующие и создавать новые тест-кейсы.

- Тестирование зависит от контекста. Тестирование выполняется по-разному, в зависимости от контекста. Выбор методологии, техники и вида тестирования напрямую зависит от того, какой продукт мы тестируем, каким является предназначение данного ПО. К примеру, банковское ПО требует более тщательной проверки, чем компьютерная игра.
- Заблуждение об отсутствии ошибок. Если тестирование ПО не выявило дефектов, это еще не означает, что данный продукт готов к выходу. Нахождение багов будет бесполезной процедурой, если система неудобна и не соответствует нуждам и ожиданиям пользователей.

7. Что такое независимое тестирование?

  Это тестирование силами дополнительно привлечённой команды тестировщиков, не участвующих непосредственно в разработке данного продукта.
И поскольку они не были частью процесса разработки, они будут проводить тесты на нейтральной, беспристрастной основе. Что приведет к улучшению качества тестирования.

8. Что такое тестирование со сдвигом влево?

Это стратегия раннего тестирования. Т.е начинать тестирование на более раннем этапе жизненного цикла разработки ПО. В результате качество тестирования улучшается, т.к. чем раньше найден баг — тем дешевле стоимость его починки.

9. Почему тестирование делится на отдельные этапы?

Разделение тестирования на этапы помогает улучшить производительность и качество тестирования. Т.к. каждый этап имеет свое назначение, можно проводить тесты как для отдельных этапов, так и для системы в целом. И это упрощает управление тестированием.

10. Какие есть этапы тестирования?

-Работа с требованиями. Знакомство с требованиями заказчика и их обсуждение.
-Разработка стратегии тестирования. По итогам полученной информации по требованиям заказчика, разрабатывается стратегия тестирования продукта(определить виды тестирования, сроки тестирования, определить необходимое для тестирования оборудование и т.д.)
-Создание тестовой документации. Разработка документации тестовых сценариев, отчетности, методологии тестирования.
-Тестирование прототипа. Тестирование основного функционала и устранение найденных дефектов, допущенных на этапе разработки. 
-Основное тестирование. Выполнение общей проверки продукта. Самый длительный и объемный процесс.
-Стабилизация. На данном этапе фиксируются и устраняются найденные баги. А также проверяется коммуникация системы и продукта.
-Эксплуатация и поддержка. Выпуск продукта во внешнюю среду - конечному пользователю. Тестирование и устранение ошибок, которые нашел конечный пользователь.

11. Как вы тестируете продукт, если требования еще не зафиксированы?

Тогда план тестирования может быть создан на основе предположений, сделанных относительно продукта. При этом все предположения необходимо документировать.

12. Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?

Необходимо проверить, охватывает ли каждое требование хотя бы один тест-кейс. Если да, то можно
сказать, что тестовых примеров достаточно для тестирования продукта.

13. Что подразумевается под тестовыми данными?

Это набор входных значений, необходимых для выполнения тест-кейсов.

14. Что такое бета-тестирование?

На этом этапе почти готовая версия продукта становится доступна пользователям, с целью выявления максимального количества ошибок и их последующего устранения перед окончательным выходом продукта на рынок. Для бета-тестирования привлекают добровольцев из будущих пользователей продукта.

15. Что означает пилотное тестирование? (Pilot)

Это тестирование ПО, которое проверяет компонент системы или всю систему в режиме реального времени. Выбранная группа конечных
пользователей проверяет тестируемую систему. Т.е. это проведение генеральной репетиции для последующего теста на
удобство использования (прогоняется одна–две сессии перед главным исследованием).
Смысл пилотного тестирования это тест самого теста, чтобы убедиться, что все пройдет максимально гладко.

16. Что такое бизнес – логика?

Бизнес-логика описывает работу всех бизнес-процессов, существующих в продукте (то, что конкретная программа по задумке должна сделать).

17. Какие существуют основные виды тестирования ПО?

1.Функциональное - проверяет как работает система с точки зрения правильности работы функционала
2.Нефункциональное - проверяет как работает система с точки зрения удобства пользователя (тестирование производительности, Usability, тестирование безопасности, тестирование локализации, тестирование интернационализации и т.д.)
3.Связанное с изменениями (регрессионное, Sanity, Smoke, тестирование сборки..)

18. Методы тестирования?

 -метод "Чёрного ящика" (Black box) Тестировщик имеет доступ к ПО только через те же интерфейсы, что и заказчик или пользователь, либо через внешние интерфейсы (доступа к исходному коду нет).
 -метод "Белого ящика" (White box)  Тестировщик имеет доступ к исходному коду.
 -метод "Серого ящика" (Grey box)  Тестировщик ПО  имеет ограниченный доступ к исходному коду.

19. Что такое пирамида / уровни тестирования?

«Пирамида тестов» — группировка тестов ПО по разным уровням детализации. Она также даёт представление, сколько тестов должно быть в каждой из этих групп.
Необходимо придерживаться формы пирамиды, чтобы придумать здоровый, быстрый и поддерживаемый набор тестов. Придумать много маленьких и быстрых юнит-тестов. Написать несколько более общих тестов и совсем мало высокоуровневых сквозных тестов, которые проверяют приложение от начала до конца.
Уровни Тестирования ПО:
- Компонентное или Модульное тестирование (Component Testing or Unit Testing)  тестируется отдельный класс или функция, небольшие библиотеки, отдельные части приложения. Как правило их можно исследовать изолированно друг от друга. Часто модульное тестирование осуществляется разработчиками ПО.
- Интеграционное тестирование (Integration Testing) тестируются интерфейсы между компонентами, подсистемами или системами. Направлено на проверку взаимодействия между несколькими частями приложения(каждая из которых была проверена на модульной стадии тестирования).
- Системное тестирование (System Testing) тестируется система на её соответствие требованиям. Направлено на проверку всего приложения, как единого целого, собранного из частей, проверенных на модульном и интеграционном уровнях.
- Приемочное тестирование (Acceptance Testing) вид тестирования, проводимый на этапе сдачи готового продукта (или готовой части продукта) заказчику. Целью приемочного тестирования является определение готовности продукта, что достигается путем прохода тестовых сценариев и случаев, которые построены на основе спецификации требований к разрабатываемому ПО.

20. Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)

Тестирование в рамках которого применяются сценарии, которые соответствуют внештатному поведению системы. Неожиданные условия могут быть чем угодно, от неправильного типа данных до
хакерской атаки. Целью отрицательного тестирования является предотвращение сбоя приложений из-за
некорректных входных данных. 

21. Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)

 Это тип тестирования, который включает в себя правильное взаимодействие с ПО.
Это дает ожидаемые результаты и доказывает, что ПО ведет себя так, как ожидалось (ввод валидных значений).

22. Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)

Компонентное или Модульное тестирование (Component Testing or Unit Testing)  тестируется отдельный класс или функция, небольшие библиотеки, отдельные части приложения. Как правило их можно исследовать изолированно друг от друга. Часто модульное тестирование осуществляется разработчиками ПО.

23. Что подразумевается под интеграционным тестированием?

Интеграционное тестирование (Integration Testing) тестируются интерфейсы между компонентами, подсистемами или системами. Направлено на проверку взаимодействия между несколькими частями приложения(каждая из которых была проверена на модульной стадии тестирования).

24. Разница между Unit testing и Integration testing?

Основная разница между модульным и интеграционным тестированием состоит в целях, то есть в типах обнаруживаемых дефектов, которые, в свою очередь, определяют стратегию выбора входных данных и методов анализа. 

25. Что такое системное интеграционное тестирование? (SIT — System Integration testing) 

Тестирование взаимодействия между всеми компонентами системы, либо взаимодействия разных систем 
между собой, либо тестирование интерфейсов с помощью которых взаимодействуют системы. 

26. В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)

Тестовый драйвер - это фрагмент кода, который вызывает тестируемый программный компонент. Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности.  Заглушка: вызывается тестируемым модулем. Драйвер: вызывает модуль для тестирования.

27. Что подразумевается под системным тестированием?

Выполняется на полной интегрированной системе с целью проверки соответствия системы исходным требованиям. Например, если мы говорим об интернет-магазине, то здесь мы будем смотреть как вообще все модули, которые были разработаны для этого магазина, работают между собой. 
Можно ли пройтись по всему Business Flow данного приложения, т.е. можем ли мы зарегистрироваться, найти 
товар, положить его в корзину, оплатить наш заказ, отслеживать этот товар в пути. Т.е. мы тестируем всё 
приложение целиком.

28. Что такое функциональное тестирование?

 Функциональное тестирование направлено на проверку соответствия функциональных требований ПО его 
реальным характеристикам (проверяем, что наша система делает). Основная задача функционального тестирования - подтверждение того, что наш разрабатываемый продукт обладает всем функционалом, который требует заказчик. 

29. Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)

Тестирование взаимодействия - это функциональное тестирование, проверяющее способность приложения
(устройства) взаимодействовать с одним и более компонентами/системами/устройствами и включающее в себя
тестирование совместимости и интеграционное тестирование.
Тестирование совместимости - вид нефункционального тестирования, основной целью которого является проверка корректной работы продукта в определенном окружении. Окружение может включать в себя следующие элементы:
-Аппаратная платформа;
-Сетевые устройства;
-Периферия (принтеры, CD/DVD-приводы, веб-камеры и пр.);
-Операционная система (Unix, Windows, MacOS, ...)
-Базы данных (Oracle, MS SQL, MySQL, ...)
-Системное программное обеспечение (веб-сервер, файрволл, антивирус, ...)
-Браузеры (Internet Explorer, Firefox, Opera, Chrome, Safari)

30. Что такое тестирование на соответствие? (Conformance/Compilance testing)

CONFORMANCE testing - это тип тестирования ПО, который удостоверяет, что система
ПО соответствует стандартам и правилам, определенным IEEE, W3C или ETSI. Включает в себя:
- Производительность
- Функции
- Прочность (Robustness)
- Совместимость (Interoperability)
- Поведение системы

31. Что такое нефункциональное тестирование?
 
Это тип тестирования ПО для проверки нефункциональных аспектов ПО. Оно предназначено для проверки готовности системы по нефункциональным параметрам, которые никогда не учитываются при функциональном тестировании.
 Нефункциональное тестирование должно повысить удобство использования, эффективность,
ремонтопригодность продукта. Помогает снизить производственный риск и затраты, связанные с нефункциональными аспектами продукта.











