Виды тестирования.

1)Функциональные виды. Это тип тестирования ПО, который проверяет продукт на соответствие функциональным требованиям / спецификациям. (проверяет весь функционал продукта)

2) Нефункциональные виды.
- Производительности. Это комплекс типов тестирования, целью которорых является определение работоспособности, стабильности, потребления ресурсов и других атрибутов качества приложения в условиях различных сценариев использования и нагрузок (тестирование емкости/способностей (Capacity testing), стрессовое (Stress testing), нагрузочное (Load testing), объемное тестирование (Volume testing), выносливости (Soak/Endurance testing), стабильности/надежности (Stability / Reliability testing), шиповое (Spike), отказоустойчивости (Stability testing), масштабируемости (Scalability test))
- Отказ и восстановление (Failover and Recovery testing) проверяет тестируемый продукт с точки зрения способности противостоять и успешно восстанавливаться после возможных сбоев, возникших в связи с ошибками ПО, отказами оборудования или проблемами связи. Целью данного вида тестирования является проверка систем восстановления (или дублирующих основной функционал систем), которые, в случае возникновения сбоев, обеспечат сохранность и целостность данных тестируемого продукта.
- Удобство пользования (Usability testing) это тестирование, которое проводится с целью оценить удобство, интуитивность, полезность и удовлетворенность от использования продукта для конечного пользователя.
- Тестирование установки (Installation testing) тестирование корректности инсталляции ПО и настройки, а также последующее обнаружение обновлений или удаление ПО.
- Тестирование безопасности (Security and Access Control testing) это стратегия тестирования, используемая для проверки безопасности системы, а также для анализа рисков, связанных с обеспечением целостного подхода к защите приложения, атак хакеров, вирусов, несанкционированного доступа к конфиденциальным данным.
- тестирование локализации и интернационализации (localization and internationalization). это процесс придания продукту свойств определенной народности, местности, расположения. Локализация – процесс адаптации программного продукта к языку и культуре клиента.  Интернационализация - процесс разработки приложения, при котором код самого приложения независим от любых языковых и культурных особенностей региона/стран. Суть нтернационализации в том, чтобы сделать процесс локализации проще, дешевле и быстрее (сделать продукт универсальным для разных людей, народов).

3) Связанное с изменениями:
- Регрессионное (Regression testing) Цель регрессионного тестирования – убедиться, что исправление одних багов не стало причиной возникновения других и что обновление билда не создало новых дефектов в уже проверенном коде.
- Санитарное (Sanity testing) Проверка одной функции (одной фичи)
- Дымовое (Smoke testing)  это особый вид проверки ПО, а именно проверка наиболее важных и критических моментов. Smoke тесты подтверждают, может ли команда QA продолжить дальнейшее тестирование. Дымовые тесты — это минимальный набор тестов, запускаемых на каждой сборке (проверяем, работают ли важные функции).
- Тестирование сборки (Build Verification testing) направленное на определение соответствия выпущенной версии критериям качества для начала тестирования. По своим целям является аналогом Дымового Тестирования, направленного на приемку новой версии в дальнейшее тестирование или эксплуатацию.
- Ретест (retest testing). Повторная проверка исправленного бага.

Жизненный цикл бага.
Жизненный цикл бага (bug workflow) – последовательность этапов, которые проходит баг на своём пути с момента его создания до окончательного закрытия. 
-Новый (New). Тестировщик нашел баг, дефект успешно занесен в «Bug-tracking» систему.
-Открыт (Opened). После того, как тестировщик отправил ошибку, она либо автоматически, либо вручную назначается на человека который должен её проанализировать (обычно Project Manager). В зависимости от решения менеджера проекта, баг может быть:
-Отложен (Deferred). Исправление этого бага не несет ценности на данном этапе разработки или по другим, отсрочивающим его исправление причинам.
-Отклонен (Rejected). По разным причинам дефект может и не считаться дефектом или считаться неактуальным дефектом, что вынуждает отклонить его.
-Дубликат (Duplicate). Баг уже описан в системе.
-Назначен (Assigned). Если ошибка актуальна и должна быть исправлена в следующей сборке (build), происходит назначение на разработчика который должен исправить ошибку.
Когда наличие дефекта неопровержимо, его путь может привести к следующим статусам:
-Исправлен (Fixed). Ответственный за исправление бага разработчик заявляет, что устранил дефект.
В зависимости от того, исправил ли разработчик дефект, дефект может быть:
-Проверен (Verified). Тестировщик проверяет, действительно ли ответственный разработчик исправил дефект. Если бага больше нет, он получает данный статус.
-Повторно открыт (Reopened). после проверки, баг все-таки остался
-Закрыт (Closed). Баг устранен